"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHelp = void 0;
const stringify_cli_args_1 = require("./utilities/stringify-cli-args");
const stringify_examples_1 = require("./utilities/stringify-examples");
const stringify_rows_1 = require("./utilities/stringify-rows");
function createHelp(name, commandConfig) {
    const result = [];
    result.push('');
    if (typeof commandConfig.description !== 'undefined') {
        result.push(`  ${commandConfig.description}`);
        result.push('');
    }
    result.push('  Usage:');
    result.push(`    $ ${stringify_cli_args_1.stringifyCliArgs(name, commandConfig.positionals, typeof commandConfig.options !== 'undefined' &&
        commandConfig.options.length !== 0)}`);
    result.push('');
    if (typeof commandConfig.positionals !== 'undefined' &&
        commandConfig.positionals.length !== 0) {
        result.push('  Arguments:');
        result.push(stringify_rows_1.stringifyRows(createPositionalRows(commandConfig.positionals)));
        result.push('');
    }
    result.push('  Options:');
    result.push(stringify_rows_1.stringifyRows(createOptionRows(commandConfig.options)));
    result.push('');
    if (typeof commandConfig.shorthands !== 'undefined') {
        result.push('  Shorthands:');
        result.push(stringify_rows_1.stringifyRows(createShorthandRows(commandConfig.shorthands)));
        result.push('');
    }
    if (typeof commandConfig.examples !== 'undefined' &&
        commandConfig.examples.length !== 0) {
        result.push('  Examples:');
        result.push(stringify_examples_1.stringifyExamples(name, commandConfig.examples));
        result.push('');
    }
    return result.join('\n');
}
exports.createHelp = createHelp;
function createPositionalRows(positionalsConfig) {
    const result = [];
    for (const positionalConfig of positionalsConfig) {
        result.push([
            `    <${positionalConfig.name}>`,
            typeof positionalConfig.description === 'undefined'
                ? ''
                : positionalConfig.description
        ]);
    }
    return result;
}
function createOptionRows(optionsConfig) {
    const result = [
        ['help', `    -h, --help`, 'Print this message.'],
        ['version', `    -v, --version`, 'Print the version.']
    ];
    if (typeof optionsConfig !== 'undefined') {
        for (const optionConfig of optionsConfig) {
            result.push([
                optionConfig.name,
                `    ${stringifyFlags(optionConfig.name, optionConfig.aliases)}`,
                typeof optionConfig.description === 'undefined'
                    ? ''
                    : optionConfig.description
            ]);
        }
    }
    return result
        .sort(function (x, y) {
        return x[0].localeCompare(y[0]);
    })
        .map(function (row) {
        return [row[1], row[2]];
    });
}
function stringifyFlags(name, shorthands) {
    const mainFlag = `--${name}`;
    if (typeof shorthands === 'undefined') {
        return mainFlag;
    }
    const result = [];
    for (const shorthand of shorthands) {
        result.push(`-${shorthand}`);
    }
    return [result, mainFlag].join(', ');
}
function createShorthandRows(shorthandsConfig) {
    const result = [];
    for (const shorthandName in shorthandsConfig) {
        result.push([
            `    --${shorthandName}`,
            `Equivalent to: ${shorthandsConfig[shorthandName].join(' ')}`
        ]);
    }
    return result.sort(function (x, y) {
        return x[0].localeCompare(y[0]);
    });
}
