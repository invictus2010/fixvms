"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapArgTypeToValueParser = void 0;
const create_enum_parser_1 = require("./value-parser/create-enum-parser");
const parse_boolean_1 = require("./value-parser/parse-boolean");
const parse_integer_1 = require("./value-parser/parse-integer");
const parse_integer_positive_1 = require("./value-parser/parse-integer-positive");
const parse_integer_positive_non_zero_1 = require("./value-parser/parse-integer-positive-non-zero");
const parse_number_1 = require("./value-parser/parse-number");
const parse_number_positive_1 = require("./value-parser/parse-number-positive");
const parse_number_positive_non_zero_1 = require("./value-parser/parse-number-positive-non-zero");
const parse_string_1 = require("./value-parser/parse-string");
function mapArgTypeToValueParser(type) {
    if (typeof type === 'string') {
        switch (type) {
            case 'BOOLEAN': {
                return parse_boolean_1.parseBoolean;
            }
            case 'NUMBER': {
                return parse_number_1.parseNumber;
            }
            case 'POSITIVE_NUMBER': {
                return parse_number_positive_1.parseNumberPositive;
            }
            case 'NON_ZERO_POSITIVE_NUMBER': {
                return parse_number_positive_non_zero_1.parseNumberPositiveNonZero;
            }
            case 'INTEGER': {
                return parse_integer_1.parseInteger;
            }
            case 'POSITIVE_INTEGER': {
                return parse_integer_positive_1.parseIntegerPositive;
            }
            case 'NON_ZERO_POSITIVE_INTEGER': {
                return parse_integer_positive_non_zero_1.parseIntegerPositiveNonZero;
            }
            case 'STRING': {
                return parse_string_1.parseString;
            }
            default: {
                throw new Error('Invalid type');
            }
        }
    }
    if (typeof type === 'function') {
        return type;
    }
    return create_enum_parser_1.createEnumParser(type);
}
exports.mapArgTypeToValueParser = mapArgTypeToValueParser;
