export interface CliConfig {
    name: string;
    version: string;
}
export interface MultiCommandCliConfig extends CliConfig {
    description?: string;
    examples?: Array<string>;
}
export declare type CommandConfig = {
    handler?: CommandHandler;
    description?: string;
    examples?: Array<string>;
    positionals?: Array<PositionalConfig>;
    options?: Array<OptionConfig>;
    shorthands?: {
        [key: string]: Array<string>;
    };
};
export declare type CommandHandler = (result: {
    positionals: {
        [key: string]: unknown;
    };
    options: {
        [key: string]: unknown;
    };
    remainder: Array<string>;
}) => void;
export interface PositionalConfig {
    name: string;
    type: Type;
    description?: string;
    default?: unknown;
    required?: boolean;
}
export interface OptionConfig extends PositionalConfig {
    aliases?: Array<string>;
}
export declare type Type = string | ValueParser | Array<boolean | number | string | null>;
export declare type ValueParser = (arg: string, name: string) => unknown;
export declare type Result = {
    positionals: {
        [key: string]: unknown;
    };
    options: {
        [key: string]: unknown;
    };
    remainder: Array<string>;
};
//# sourceMappingURL=types.d.ts.map