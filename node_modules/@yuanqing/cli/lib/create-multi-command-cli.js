"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMultiCommandCli = void 0;
const contains_option_1 = require("./utilities/contains-option");
const create_help_1 = require("./utilities/help/create-help");
const create_multi_command_help_1 = require("./utilities/help/create-multi-command-help");
const run_command_1 = require("./utilities/run-command");
function createMultiCommandCli(multiCommandCliConfig, commandsConfig, defaultCommandConfig) {
    return function (args = process.argv.slice(2)) {
        if (contains_option_1.containsOption(args, ['version', 'v']) === true) {
            console.log(multiCommandCliConfig.version);
            return;
        }
        const firstArg = args[0];
        if (args.length === 1 && (firstArg === '--help' || firstArg === '-h')) {
            console.log(create_multi_command_help_1.createMultiCommandHelp(multiCommandCliConfig.name, commandsConfig, multiCommandCliConfig.description, multiCommandCliConfig.examples));
            return;
        }
        const commandConfig = commandsConfig[firstArg];
        if (typeof commandConfig === 'undefined') {
            if (typeof defaultCommandConfig === 'undefined') {
                throw new Error(`Invalid command: ${firstArg}`);
            }
            return run_command_1.runCommand(args, defaultCommandConfig);
        }
        if (contains_option_1.containsOption(args.slice(1), ['help', 'h']) === true) {
            console.log(create_help_1.createHelp(`${multiCommandCliConfig.name} ${firstArg}`, commandConfig));
            return;
        }
        return run_command_1.runCommand(args.slice(1), commandConfig);
    };
}
exports.createMultiCommandCli = createMultiCommandCli;
